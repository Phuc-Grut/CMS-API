// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using VFi.Domain.CMS.Models;
using VFi.Infra.CMS.Context;
using VFi.NetDevPack.Domain;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace VFi.Domain.CMS.Models
{
   

    public sealed class DAMContextProcedures : IDAMContextProcedures
    {
        private readonly SqlCoreContext _context;

        public DAMContextProcedures(SqlCoreContext context)
        {
            _context = context;
        }

        public async Task<int> SP_COPY_CONTENTAsync(Guid? ContentId, string new_ContentCode, string new_ContentName, int? new_Status, Guid? createdBy, string? createdByName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ContentId",
                    Value = ContentId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "new_ContentCode",
                    Size = 50,
                    Value = new_ContentCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_ContentName",
                    Size = 510,
                    Value = new_ContentName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "new_Status",
                    Value = new_Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                 new SqlParameter
                {
                    ParameterName = "createdBy",
                    Value = createdBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "createdByName",
                    Value = createdByName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dam].[SP_COPY_CONTENT] @ContentId, @new_ContentCode, @new_ContentName, @new_Status, @createdBy, @createdByName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<List<SP_GET_CONTENT_BY_CONTENTTYPE>> SP_GET_CONTENT_BY_CONTENTTYPEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_GET_CONTENT_BY_CONTENTTYPE>("EXEC @returnValue = [dam].[SP_GET_CONTENT_BY_CONTENTTYPE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<List<SP_GET_TOP_CATEGORY>> SP_GET_TOP_CATEGORYAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_GET_TOP_CATEGORY>("EXEC @returnValue = [dam].[SP_GET_TOP_CATEGORY]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<List<SP_GET_TOP_NEW_CONTENT>> SP_GET_TOP_NEW_CONTENTAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_GET_TOP_NEW_CONTENT>("EXEC @returnValue = [dam].[SP_GET_TOP_NEW_CONTENT]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}

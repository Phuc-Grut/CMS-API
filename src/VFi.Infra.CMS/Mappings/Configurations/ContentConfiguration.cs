// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using VFi.Domain.CMS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

namespace VFi.Infra.CMS.Mappings.Configurations
{
    public partial class ContentConfiguration : IEntityTypeConfiguration<Content>
    {
        public void Configure(EntityTypeBuilder<Content> entity)
        {
            entity.ToTable("Content", "dam");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.Property(e => e.CategoryRoot).HasMaxLength(250);

            entity.Property(e => e.Code)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.CreatedByName).HasMaxLength(255);

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");

            entity.Property(e => e.DeletedDate).HasColumnType("datetime");

            entity.Property(e => e.GroupCategories)
                .HasMaxLength(1000)
                .IsUnicode(false);

            entity.Property(e => e.IdCategories)
                .HasMaxLength(500)
                .IsUnicode(false);

            entity.Property(e => e.IdGroupCategories)
                .HasMaxLength(500)
                .IsUnicode(false);

            entity.Property(e => e.Image).HasMaxLength(255);

            entity.Property(e => e.LinkInfo).HasMaxLength(250);

            entity.Property(e => e.Name).HasMaxLength(400);

            entity.Property(e => e.ShortDescription).HasMaxLength(4000);

            entity.Property(e => e.Tags).HasMaxLength(1000);

            entity.Property(e => e.UpdatedByName).HasMaxLength(255);

            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.Property(e => e.Slug).HasMaxLength(255);

            entity.Property(e => e.IdNumber).ValueGeneratedOnAdd().Metadata.SetAfterSaveBehavior(PropertySaveBehavior.Ignore);

            entity.HasOne(d => d.CategoryRootNavigation)
                .WithMany(p => p.Content)
                .HasForeignKey(d => d.CategoryRootId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Content_CategoryRoot");

            entity.HasOne(d => d.ContentTypes)
                .WithMany(p => p.Content)
                .HasForeignKey(d => d.ContentTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Content_ContentType");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<Content> entity);
    }
}
